class CalcControler {

    constructor() {
        this._audio = new Audio('click.mp3');
        this._audioOnOff = false
        this._lastOperator = '';
        this._lastNumber = '';
        this._operation = [];
        this._locale = 'pt-BR' //crei um atributo pra hora
        this._displayCalcEl = document.querySelector("#display");
        this._dateEl = document.querySelector("#data");
        this._timeEl = document.querySelector("#hora");
        this._currentDate;
        this.initialize();
        this.initButtonsEvents();
        this.initkeyboard();

    }

    pasterFromClipboard() {

        document.addEventListener('paste', e => {
            let text = e.clipboardData.getData('Text')
            this.displayCalc = parseFloat(text)

            console.log(text)
        })
    }

    copyToClipboard() {

        let input = document.createElement('input'); //criando emento

        input.value = this.displayCalc;
        document.body.appendChild(input);

        input.select();

        document.execCommand("Copy")

        input.remove();


    }

    initialize() {

        this.setDisplayDateTime();

        setInterval(() => { //Função executada em um intervalo de tempo

            this.setDisplayDateTime(); //aqui eu chamo a fnção

        }, 1000);    //aqui determino o espaço de tempo em mmilisegundos, que ele vai atualizar

        /*   setTimeout(() => {
                
                    clearInterval(interval); // aqui eu faço com que o codigo pare apos 10 segundos
                    //no caso eu paro a variavel de cima
                
                }, 10000); */



        this.setLastNumberToDisplay();
        this.pasterFromClipboard();
        document.querySelectorAll('.btn-ac').forEach(btn => {
            btn.addEventListener('dbclick', e => {
                this.toglleAudio()
            })
        })

    }
    toglleAudio() {


        this._audioOnOff = !this._audioOnOff
        console.log('fundionou', this._audioOnOff)

        // Mesmo codigo
        //this._audioOnOff = (this._audioOnOff) ? false :true

        /*  Mesmo codigo de outra mandeira
         if(this._audioOnOff) {
             this._audioOnOff = false 
         }else{
             this._audioOnOff = true
         }
         */
    }

    playAudio() {

        if (this._audioOnOff) {
            this._audio.currentTime = 0;
            this._audio.play();

        }
    }
    initkeyboard() {

        document.addEventListener('keyup', e => {  // quando eu tiro o dedo da tecla, e a função que ele vai fazer

            this.playAudio();

            switch (e.key) {


                case "Escape":
                    this.clearAll();
                    break;

                case "Backspace":
                case " ":
                    this.clearEntry();
                    break;

                case "+":
                case "-":
                case "*":
                case "/":
                case "%":

                    this.addOperation(e.key);
                    break;

                case "Enter":
                case "=":
                    this.calc();

                    break;

                case ".":
                case ",":
                    this.addDot();

                    break;

                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':

                    this.addOperation(parseInt(e.key));

                    break;
                case 'c':
                    if (e.ctrlKey) this.copyToClipboard();
                    break;
            }


        });
        // document.addEventListener('keydown'); //quando eu aperto a tecla
        // document.addEventListener('keypress'); // quando eu mantenho pressionado



    }

    addEventListenerAll(element, events, fn) {

        events.split(' ').forEach(event => {

            //events pego todos os eventos
            //.split eu transformo aqueeles parametros("drag e click") em arrays
            //forEach passo por cada um elemento dentro do array
            // e adiciono o evento em cada element

            element.addEventListener(event, fn, false); //O false serve para so um dos eventos ser dispparado

        })
    }
    clearAll() {
        this._operation = []; // devolvo em um array novo sem nada
        this._lastNumber = '';
        this._lastOperator = ' ';

        this.setLastNumberToDisplay();


    }
    clearEntry() {
        this._operation.pop(); // tiro o ultimo elemento do array
        this.setLastNumberToDisplay();

    }
    setError() {
        this.displayCalc = "Error";
    }


    getLastOperation() {

        return this._operation[this._operation.length - 1];
        // to pegando o ultimo elemento do meu array, pois to fazendo o numero de elementos menos o tamanho pra pegar o ultimo elemento
    }
    setLastOperation(value) {
        this._operation[this._operation.length - 1] = value;  //aqui eu substituo o ultimo operador pelo o que foi digtado no momento



    }
    isOperator(value) {
        return (['+', '-', '*', '%', '/'].indexOf(value) > -1);
        //se for um operador returna true se nao for um operador ele retorna false e o -1

    }
    pushOperation(value) {
        this._operation.push(value)
        if (this._operation.length > 3) {
            this.calc();
        }
    }
    getResult() {

        try{ //Try Catch:
            //tratar erros. Significa: try(tenter fazer alguma coisa) 
            //Catch(se voce nao consiguer fazer alguma coisa no try eu executo automaticamente o que estiver no bloco Catch)

            return eval(this._operation.join("")); // coloco o valor da soma dos dois primeiros numero 
        }catch(e){
            setTimeout(() =>{
                this.setError();
            }, 1 );
            
        }


    }

    calc() {


        let last = '';
        this._lastOperator = this.getLasItem();

        if (this._operation.length < 3) {

            let firstItem = this._operation[0]
            this._operation = [firstItem, this._lastOperator, this._lastNumber] // fizemos isso pra quando quisermos ficar somando com o ultimo numero apertando o igual

        }

        if (this._operation.length > 3) {

            last = this._operation.pop(); // excluo o ultimo simbolo de operação digitado pra pegar a soma de dois em dois
            this._lastNumber = this.getResult(); //numero que foi calculado, somando com o ultimo numero que foi digitado

        } else if (this._operation.length == 3) {


            this._lastNumber = this.getLasItem(false); //numero que foi calculado, somando com o ultimo numero que foi digitado


        }


        let result = this.getResult();

        if (last == '%') {

            result /= 100; // ele é igual ele memo dividido por 100
            this._operation = [result];

        } else {

            this._operation = [result] // agora com o resultado dos pares, eu posso deixar que o usuario digite mais um numero e efetuar mais uma conta

            if (last) this._operation.push(last);
        }

        this.setLastNumberToDisplay();

    }
    getLasItem(isOperator = true) {
        let lastItem;

        for (let i = this._operation.length - 1; i >= 0; i--) {

            if (this.isOperator(this._operation[i]) == isOperator) {
                lastItem = this._operation[i];
                break;
            }

        }
        if (!lastItem) {

            lastItem = (isOperator) ? this._lastOperator : this._lastNumber;
        }

        return lastItem;
    }
    setLastNumberToDisplay() {

        let lastNumber = this.getLasItem(false);

        if (!lastNumber) lastNumber = 0;
        this.displayCalc = lastNumber;
    }

    addOperation(value) {



        if (isNaN(this.getLastOperation())) {
            //String

            if (this.isOperator(value)) {
                //trocar o operador, se digitar + e depois o - fica o -

                this.setLastOperation(value);


            } else {

                this.pushOperation(value)
                this.setLastNumberToDisplay();

            }

        } else {

            if (this.isOperator(value)) {

                this.pushOperation(value)


            } else {

                //Number
                let newValue = this.getLastOperation().toString() + value.toString(); // pego o ultimo valor se for numero e concadeno com o novo numero
                this.setLastOperation(newValue);

                //atualizar display
                this.setLastNumberToDisplay();
            }
        }

    }
    addDot() {

        let lastOperation = this.getLastOperation();

        if (typeof lastOperation === 'string' && lastOperation.split('').indexOf('.') > -1) return;

        if (this.isOperator(lastOperation) || !lastOperation) {

            this.pushOperation('0.');
        } else {
            this.setLastOperation(lastOperation.toString() + '.');
        }
        this.setLastNumberToDisplay();
    }

    execBtn(value) {
        this.playAudio();


        switch (value) {

            case "ac":
                this.clearAll();
                break;

            case "ce":
                this.clearEntry();
                break;

            case "soma":
                this.addOperation('+');

                break;

            case "subtracao":
                this.addOperation('-');

                break;

            case "divisao":

                this.addOperation('/');

                break;

            case "multiplicacao":

                this.addOperation('*');

                break;

            case "porcento":

                this.addOperation('%');

                break;

            case "igual":
                this.calc();

                break;

            case "ponto":
                this.addDot();

                break;

            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':

                this.addOperation(parseInt(value));

                break;


            default:
                this.setError();
                break;









        }
    }

    initButtonsEvents() {

        let buttons = document.querySelectorAll("#buttons > g, #parts > g"); // o "> " siginifica filho de buttons que é a classe
        //atribuo buttons a uma variavel para poder utlizar o forEach como atributo da variavel
        buttons.forEach((btn, index) => {
            //aqui eu faço que ele va no objeto (buttons) e verifique cada elemento
            // aqui faço um forEach em todos os filhos de buttons e parts
            //e adciono um evento para cada botaão
            //btn é parametro pois todas as classes tem btn no inicio ou seja vai pegar todos

            this.addEventListenerAll(btn, "click drag", e => {

                let textBtn = btn.className.baseVal.replace("btn-", "")

                this.execBtn(textBtn)
            })

            this.addEventListenerAll(btn, "mouseover mouseup mousedown", e => {

                btn.style.cursor = "pointer"; //aqui eu mudo o estilo do mouse para saber que é uma area clicavel

            });


        })

    }


    setDisplayDateTime() {

        this.displayDate = this.currentDate.toLocaleDateString(this._locale)
        //criei um atributo pra hora

        /* Poderia ser assim tbm 
         this.displayDate = this.currentDate.toLocaleDateString(this._locale,{
             day: "2-digit",
             month: "long",
             year: "numeric",
         })
         */


        this.displayTime = this.currentDate.toLocaleTimeString(this._locale)

    }

    get displayDate() { // devolvo uma data pre estabelecida
        return this._dateEl.innerHTML;

    }
    set displayDate(value) { // aletero a data
        return this._dateEl.innerHTML = value;

    }


    get displayTime() {  // devolvo uma hora pre estabelecida

        return this._timeEl.innerHTML;

    }

    set displayTime(value) {
        // aletero a hora

        return this._timeEl.innerHTML = value;

    }



    get displayCalc() {

        //so devolve o que esta no atributo
        return this._displayCalcEl.innerHTML;


    }

    set displayCalc(value) {

        if(value.toString().length > 10){
            this.setError();
            return false;
        }


        //altero um valor no meu atributo
        this._displayCalcEl.innerHTML = value;

    }

    get currentDate() {

        return new Date();
    }

    set currentDate(date) {

        this.currentDate = date;

    }
}
